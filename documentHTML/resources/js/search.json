[[{"i":"hpa3---blockchain---documentation","l":"HPA3 - Blockchain - Documentation","p":["This library is a collection of modules that contain functionality for a etherum wallet (like Metamask).","This wallet SDK built base on web3js, web3-core"]},{"l":"Basic system flow"}],[{"l":"Getting started","p":["This SDK is wroted by typescript"]},{"l":"Adding Wallet SDK"}],[{"l":"API Reference","p":["Here are the articles in this section","WalletBaseExtend"]}],[{"l":"WalletBaseExtend","p":["Extend Wallet like metamask base on WalletBase in web3-core"]},{"l":"Main functions"},{"l":"createWallet","p":["Generates the wallet with one account. If wallets already exist they will not be overridden."]},{"l":"Parameters","p":["none"]},{"l":"Returns","p":[": The generated wallet."]},{"l":"Example"},{"l":"createWalletFromMnemonic","p":["Generates the wallet with one account from mnemonic. If wallets already exist they will not be overridden."]},{"i":"parameters-1","l":"Parameters","p":["- : A string with 12 valid words as mnemonic to generate wallet."]},{"i":"returns-1","l":"Returns","p":[": The generated wallet."]},{"i":"example-1","l":"Example"},{"l":"addAccountFromPrivateKey","p":["Add account from private key to wallet"]},{"i":"parameters-2","l":"Parameters","p":["- : A private key"]},{"i":"returns-2","l":"Returns","p":[": The wallet."]},{"i":"example-2","l":"Example"},{"l":"addIncrementalAccount","p":["Add next account from mnemonic"]},{"i":"parameters-3","l":"Parameters","p":["none"]},{"i":"returns-3","l":"Returns","p":[": The wallet."]},{"i":"example-3","l":"Example"},{"l":"removeAccount","p":["Remove an imported account from wallet"]},{"i":"parameters-4","l":"Parameters","p":["- : An index of imported account in walletImported"]},{"i":"returns-4","l":"Returns","p":[": The wallet."]},{"i":"example-4","l":"Example"},{"l":"encryptWallet","p":["Encrypt wallet with password"]},{"i":"parameters-5","l":"Parameters","p":["- : The password which will be used for encryption."]},{"i":"returns-5","l":"Returns","p":[": The added wallet with core wallet encrypted."]},{"i":"example-5","l":"Example"},{"l":"decryptWallet","p":["Decrypt wallet with password"]},{"i":"parameters-6","l":"Parameters","p":["- : The password which will be used for decryption."]},{"i":"returns-6","l":"Returns","p":[": The added wallet with core wallet decrypted."]},{"i":"example-6","l":"Example"},{"l":"transfer","p":["Transfer from an account in wallet to an address"]},{"i":"parameters-7","l":"Parameters","p":["- : The account id in wallet.","- : The address to transfer to.","- : The value to transfer."]},{"i":"returns-7","l":"Returns","p":["- : The nonce of the transaction.","- : A transaction receipt object, or null if no receipt was found.","status- Boolean: TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.","blockHash 32 Bytes - String: Hash of the block where this transaction was in.","blockNumber- Number(or hex String): Block number where this transaction was in.","transactionHash 32 Bytes - String: Hash of the transaction.","transactionIndex- Number(or hex String): Integer of the transactions index position in the block.","from- String: Address of the sender.","to- String: Address of the receiver. null when it’s a contract creation transaction.","contractAddress- String: The contract address created, if the transaction was a contract creation, otherwise null.","cumulativeGasUsed- Number(or hex String): The total amount of gas used when this transaction was executed in the block.","gasUsed- Number(or hex String): The amount of gas used by this specific transaction alone.","logs- Array: Array of log objects, which this transaction generated."]},{"l":"transferToken","p":["Transfer token from an account in wallet to an address"]},{"i":"parameters-8","l":"Parameters","p":["- : The account id in wallet.","- : The address to transfer to.","- : The value to transfer."]},{"i":"returns-8","l":"Returns","p":["- : The nonce of the transaction.","- : A transaction receipt object, or null if no receipt was found.","status- Boolean: TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.","blockHash 32 Bytes - String: Hash of the block where this transaction was in.","blockNumber- Number(or hex String): Block number where this transaction was in.","transactionHash 32 Bytes - String: Hash of the transaction.","transactionIndex- Number(or hex String): Integer of the transactions index position in the block.","from- String: Address of the sender.","to- String: Address of the receiver. null when it’s a contract creation transaction.","contractAddress- String: The contract address created, if the transaction was a contract creation, otherwise null.","cumulativeGasUsed- Number(or hex String): The total amount of gas used when this transaction was executed in the block.","gasUsed- Number(or hex String): The amount of gas used by this specific transaction alone.","logs- Array: Array of log objects, which this transaction generated."]},{"i":"example-7","l":"Example"},{"l":"Getters"},{"l":"getListAccount","p":["Get list of account address in wallet"]},{"i":"parameters-9","l":"Parameters","p":[": The wallet object."]},{"i":"returns-9","l":"Returns","p":[": List of account address in wallet."]},{"i":"example-8","l":"Example"},{"l":"getMnemonic","p":["Get mnemonic of added wallet"]},{"i":"parameters-10","l":"Parameters","p":["none"]},{"i":"returns-10","l":"Returns","p":[": A string of 12 valid mnemonic word of wallet."]},{"i":"example-9","l":"Example"},{"l":"getWalletBase","p":["Get WalletBase of WalletBaseExtend"]},{"i":"parameters-11","l":"Parameters","p":["none"]},{"i":"returns-11","l":"Returns","p":[": A WalletBase object in web3-core"]},{"i":"example-10","l":"Example"},{"l":"getWalletImported","p":["Get list index of account imported by private key"]},{"i":"parameters-12","l":"Parameters","p":["none"]},{"i":"returns-12","l":"Returns","p":[": A list of index of account imported by private key"]},{"i":"example-11","l":"Example"},{"l":"getBalance","p":["Get balance (native token) of wallet"]},{"i":"parameters-13","l":"Parameters","p":["- : Address of account"]},{"i":"returns-13","l":"Returns","p":["(wei): Balance of account"]},{"i":"example-12","l":"Example"},{"l":"getBalanceToken","p":["Get balance (native token) of wallet"]},{"i":"parameters-14","l":"Parameters","p":["- : Address of account"]},{"i":"returns-14","l":"Returns","p":["(wei): Balance of account"]},{"i":"example-13","l":"Example"},{"l":"getAccount","p":["Get account from wallet by index"]},{"i":"parameters-15","l":"Parameters","p":["- : Index of account in wallet"]},{"i":"returns-15","l":"Returns","p":[": The account object base from web3-core"]},{"i":"example-14","l":"Example"},{"l":"getDefaultAccount","p":["Get default account of wallet"]},{"i":"parameters-16","l":"Parameters","p":["none"]},{"i":"returns-16","l":"Returns","p":[": The account object base from web3-core"]},{"i":"example-15","l":"Example"},{"l":"getNonce","p":["Get nonce of an address"]},{"i":"parameters-17","l":"Parameters","p":["- : Address of account"]},{"i":"returns-17","l":"Returns","p":[": The nonce of account"]},{"i":"example-16","l":"Example"},{"l":"Setters"},{"l":"setDefaultAccount","p":["Set default account of wallet to interact like Metamask"]},{"i":"parameters-18","l":"Parameters","p":["- : index of account need to set"]},{"i":"returns-18","l":"Returns","p":[": The wallet."]},{"i":"example-17","l":"Example"}],[{"l":"Helper function","p":["Helper function for Wallet"]},{"l":"signAndSendTransaction","p":["Sign and send transaction"]},{"l":"Parameters","p":["- : Connection to interact with blockchain","- : The data of transaction","- : The address of receiver, it can be empty to create contract","- : Private key of account to sign and send","- (optional): The nonce of account","- (optional): Estimate gas limit or not, default is false"]},{"l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found.","status- Boolean: TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.","blockHash 32 Bytes - String: Hash of the block where this transaction was in.","blockNumber- Number(or hex String): Block number where this transaction was in.","transactionHash 32 Bytes - String: Hash of the transaction.","transactionIndex- Number(or hex String): Integer of the transactions index position in the block.","from- String: Address of the sender.","to- String: Address of the receiver. null when it’s a contract creation transaction.","contractAddress- String: The contract address created, if the transaction was a contract creation, otherwise null.","cumulativeGasUsed- Number(or hex String): The total amount of gas used when this transaction was executed in the block.","gasUsed- Number(or hex String): The amount of gas used by this specific transaction alone.","logs- Array: Array of log objects, which this transaction generated."]},{"l":"Example"}],[{"l":"Getting started","p":["This SDK is wroted by typescript"]},{"l":"Adding DIDManager"}],[{"l":"Introduction","p":["Decentralized Identity (DID) smart contract base on Verifiable Credential."]},{"i":"what-is-a-verifiable-credential","l":"What is a Verifiable Credential?","p":["W3C define W3C Verifiable Credential.","In the physical world, a credential might consist of:","Information related to identifying the subject of the credential (for example, a photo, name, or identification number)","Information related to the issuing authority (for example, a city government, national agency, or certification body)","Information related to the type of credential this is (for example, a Dutch passport, an American driving license, or a health insurance card)","Information related to specific attributes or properties being asserted by the issuing authority about the subject (for example, nationality, the classes of - vehicle entitled to drive, or date of birth)","Evidence related to how the credential was derived","Information related to constraints on the credential (for example, expiration date, or terms of use).","A verifiable credential can represent all of the same information that a physical credential represents. The addition of technologies, such as digital signatures, makes verifiable credentials more tamper-evident and more trustworthy than their physical counterparts.","Holders of verifiable credentials can generate verifiable presentations and then share these verifiable presentations with verifiers to prove they possess verifiable credentials with certain characteristics.","Both verifiable credentials and verifiable presentations can be transmitted rapidly, making them more convenient than their physical counterparts when trying to establish trust at a distance.","While this specification attempts to improve the ease of expressing digital credentials, it also attempts to balance this goal with a number of privacy-preserving goals. The persistence of digital information, and the ease with which disparate sources of digital data can be collected and correlated, comprise a privacy concern that the use of verifiable and easily machine-readable credentials threatens to make worse. This document outlines and attempts to address a number of these issues in Section 7. Privacy Considerations. Examples of how to use this data model using privacy-enhancing technologies, such as zero-knowledge proofs, are also provided throughout this document.","The word \"verifiable\" in the terms verifiable credential and verifiable presentation refers to the characteristic of a credential or presentation as being able to be verified by a verifier, as defined in this document. Verifiability of a credential does not imply that the truth of claims encoded therein can be evaluated; however, the issuer can include values in the evidence property to help the verifier apply their business logic to determine whether the claims have sufficient veracity for their needs.","We define each object in our system is a Verifiable Credential or DID. Verifiable Credential"]},{"i":"what-is-erc-725","l":"What is ERC 725?","p":["ERC 725 is a proposed standard for blockchain-based identity authored by Fabian Vogelsteller, creator of ERC 20 and Web3.js. ERC 725 describes proxy smart contracts that can be controlled by multiple keys and other smart contracts. ERC 735 is an associated standard to add and remove claims to an ERC 725 identity smart contract. These identity smart contracts can describe humans, groups, objects, and machines. ERC 725 lives on the Ethereum blockchain. [ref]"]},{"l":"ERC 735 Motivation","p":["\"This standardised claim holder interface will allow Dapps and smart contracts to check the claims about a claim holder. Trust is here transfered to the issuers of claims.\"[ref]"]},{"l":"DID","p":["Base on W3C define and ERC725 standard","DID smart contract structure"]},{"l":"Workflow simulation","p":["DID basic workflow"]},{"l":"Pre-defined value"},{"l":"DID type","p":["Base on project requirement, we defined 2 claim type for DID type","- : Patient DID","- : Pharmacy DID"]},{"l":"Key Purpose","p":["Base on ERC734 and ERC725, we defined 4 key purpose","- : Management key. Full permissions to all function of DID.","- : Action key. Only can execute action function of DID.","- : Claim key. Only can add claim to DID. We will use privateKey of this key to sign signature","- : Encryption key. We will use publicKey of this key to encrypt data."]},{"l":"Schemes","p":["Base on ERC734 and ERC725, we define 4 schemes for sign data and contract call","- : ECDSA scheme. We will use this scheme for signed signature, all needed function will use this scheme.","- : RSA scheme. This is an option base on ERC734, we don't need to use this.","- : Contract call scheme.","- : Self claim scheme."]}],[{"l":"API Reference","p":["Here are the articles in this section","DIDManager"]}],[{"l":"DIDmanager","p":["DID manager SDK for manage DIDs"]},{"l":"Main function"},{"l":"createDID","p":["Create DID contract."]},{"l":"Parameters","p":["- : DID type, default is ClaimType.PATIENT(check DID type)","- : Init data for different claim, please use user id of off-chain side or use random number as id","- : Private key of signer of claimHolder, get this from server side","- : Private key of contract creator - owner of identity contract which will be created"]},{"l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Event logs of transaction","- : Added claimId of DID contract"]},{"l":"Example"},{"l":"addClaim","p":["Add claim to DID contract"]},{"i":"parameters-1","l":"Parameters","p":["- : Private key of account that has permission to interact with DID","- : DID contract address","- : The type of claim","- : The scheme of claim","- : The issuer address of claim","- : The raw data of claim","- (optional): The uri of claim"]},{"i":"returns-1","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Event logs of transaction","- : Added claimId of DID contract"]},{"i":"example-1","l":"Example"},{"l":"removeClaim","p":["Remove claim from DID contract"]},{"i":"parameters-2","l":"Parameters","p":["- : Issuer (ClaimHolder) contract address","- : The type of claim","- : DID contract address","- : Private key of account that has permission (check Key purpose) to interact with DID"]},{"i":"returns-2","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Event logs of transaction"]},{"i":"example-2","l":"Example"},{"l":"getCredential","p":["Get claim detail of DID by claim id"]},{"i":"parameters-3","l":"Parameters","p":["- : DID contract address","- : The claim id"]},{"i":"returns-3","l":"Returns","p":["- : The claim type","- : The claim scheme","- : The claim issuer","- : A hex string of the signature","- : A hex string of the data","- : URI of the claim"]},{"i":"example-3","l":"Example"},{"l":"getClaimIdsByType","p":["Get claim ids of DID by claim type"]},{"i":"parameters-4","l":"Parameters","p":["- : DID contract address","- : The claim type"]},{"i":"returns-4","l":"Returns","p":[": Array of claim ids"]},{"i":"example-4","l":"Example"},{"l":"addKey","p":["Add key to Claim holder (only access for Management side)"]},{"i":"parameters-5","l":"Parameters","p":["- : The key purpose (check Key purpose)","- : The key type (check Schemes)","- : The private key of account to add as key","- : Private key of account that has permission to interact with DID"]},{"i":"returns-5","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Event logs of transaction","- : Added key of DID contract"]},{"i":"example-5","l":"Example"},{"l":"removeKey","p":["Get owner of DID contract"]},{"i":"parameters-6","l":"Parameters","p":["- : The key to remove","- : Private key of account that has permission to interact with DID"]},{"i":"returns-6","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Event logs of transaction"]},{"i":"example-6","l":"Example"},{"l":"verifyCredential","p":["Check if DID has a claim of specific type (remember that our Claim Holder is static on server side)"]},{"i":"parameters-7","l":"Parameters","p":["- : DID contract address","- : The claim type"]},{"i":"returns-7","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Event logs of transaction"]},{"i":"example-7","l":"Example"},{"l":"Utils"},{"l":"addrToKey","p":["Hash address to key by keccak256"]},{"i":"parameters-8","l":"Parameters","p":["- : Address of account"]},{"i":"returns-8","l":"Returns","p":[": The hash keccak256 of address"]},{"i":"example-8","l":"Example"}],[{"l":"API Reference","p":["Here are the articles in this section","DIDManager"]}],[{"l":"Data Integrity","p":["Data Integrity SDK for manage ERC721"]},{"l":"Main function"},{"l":"mint","p":["Mint (Save) prescription hash to DataIntegrity contract"]},{"l":"Parameters","p":["- : Private key of account that has permission to interact with DID","- : DID contract address which will call mint function","- : The keccak256 hash of prescription image","- (optional): The uri of prescription"]},{"l":"Returns","p":[": The generated wallet."]},{"l":"Example"}]]