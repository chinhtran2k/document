[[{"i":"hpa3---blockchain---documentation","l":"HPA3 - Blockchain - Documentation","p":["This library is a collection of modules that contain functionality for a etherum wallet (like Metamask).","This wallet SDK built base on web3js, web3-core"]},{"l":"Basic system flow"}],[{"l":"Getting started","p":["This SDK is wroted by typescript"]},{"l":"Adding Wallet SDK"}],[{"l":"API Reference","p":["Here are the articles in this section","WalletBaseExtend"]}],[{"l":"WalletBaseExtend","p":["Extend Wallet like metamask base on WalletBase in web3-core"]},{"l":"Main functions"},{"l":"createWallet","p":["Generates the wallet with one account. If wallets already exist they will not be overridden."]},{"l":"Parameters","p":["none"]},{"l":"Returns","p":[": The generated wallet.","mnemonic- string- The mnemonic of the wallet.","wallet- object- The wallet base object.","walletImported- array- The array of wallet imported.","defaultAccount- number- The default account index."]},{"l":"Example"},{"l":"recoverWalletFromMnemonic","p":["Recover wallet from mnemonic."]},{"i":"parameters-1","l":"Parameters","p":["- : A string with 12 valid words as mnemonic to generate wallet."]},{"i":"returns-1","l":"Returns","p":[": The generated wallet. See createWallet for more details."]},{"i":"example-1","l":"Example"},{"l":"addAccountFromPrivateKey","p":["Add account from private key to wallet"]},{"i":"parameters-2","l":"Parameters","p":["- : A private key"]},{"i":"returns-2","l":"Returns","p":[": The wallet. See createWallet for more details."]},{"i":"example-2","l":"Example"},{"l":"addIncrementalAccount","p":["Add next account from mnemonic"]},{"i":"parameters-3","l":"Parameters","p":["none"]},{"i":"returns-3","l":"Returns","p":[": The wallet. See createWallet for more details."]},{"i":"example-3","l":"Example"},{"l":"removeAccount","p":["Remove an imported account from wallet"]},{"i":"parameters-4","l":"Parameters","p":["- : An index of imported account in walletImported"]},{"i":"returns-4","l":"Returns","p":[": The wallet. See createWallet for more details."]},{"i":"example-4","l":"Example"},{"l":"encryptWallet","p":["Encrypt wallet with password"]},{"i":"parameters-5","l":"Parameters","p":["- : The password which will be used for encryption."]},{"i":"returns-5","l":"Returns","p":[": The added wallet with core wallet encrypted.","mnemonic- string- The encrypted mnemonic of the wallet.","wallet- object- The encrypted wallet base object."]},{"i":"example-5","l":"Example"},{"l":"decryptWallet","p":["Decrypt wallet with password"]},{"i":"parameters-6","l":"Parameters","p":["- : The password which will be used for decryption."]},{"i":"returns-6","l":"Returns","p":[": The added wallet with core wallet decrypted. See createWallet for more details."]},{"i":"example-6","l":"Example"},{"i":"transfer-only-transfer-native-token---eth-use-transfertoken-to-transfer-pco","l":"transfer (Only transfer native token - ETH, use transferToken to transfer PCO)","p":["Transfer native token (ETH) from an account in wallet to an address"]},{"i":"parameters-7","l":"Parameters","p":["- : The account id in wallet.","- : The address to transfer to.","- : The value to transfer."]},{"i":"returns-7","l":"Returns","p":["- : The nonce of the transaction.","- : A transaction receipt object, or null if no receipt was found.","status- Boolean: TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.","blockHash 32 Bytes - String: Hash of the block where this transaction was in.","blockNumber- Number(or hex String): Block number where this transaction was in.","transactionHash 32 Bytes - String: Hash of the transaction.","transactionIndex- Number(or hex String): Integer of the transactions index position in the block.","from- String: Address of the sender.","to- String: Address of the receiver. null when it’s a contract creation transaction.","contractAddress- String: The contract address created, if the transaction was a contract creation, otherwise null.","cumulativeGasUsed- Number(or hex String): The total amount of gas used when this transaction was executed in the block.","gasUsed- Number(or hex String): The amount of gas used by this specific transaction alone.","logs- Array: Array of log objects, which this transaction generated."]},{"i":"example-7","l":"Example"},{"l":"transferToken","p":["Transfer ERC20 token from an account in wallet to an address"]},{"i":"parameters-8","l":"Parameters","p":["- : The account id in wallet.","- : The address to transfer to.","- : The value to transfer."]},{"i":"returns-8","l":"Returns","p":["- : The nonce of the transaction.","- : A transaction receipt object, or null if no receipt was found.","status- Boolean: TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.","blockHash 32 Bytes - String: Hash of the block where this transaction was in.","blockNumber- Number(or hex String): Block number where this transaction was in.","transactionHash 32 Bytes - String: Hash of the transaction.","transactionIndex- Number(or hex String): Integer of the transactions index position in the block.","from- String: Address of the sender.","to- String: Address of the receiver. null when it’s a contract creation transaction.","contractAddress- String: The contract address created, if the transaction was a contract creation, otherwise null.","cumulativeGasUsed- Number(or hex String): The total amount of gas used when this transaction was executed in the block.","gasUsed- Number(or hex String): The amount of gas used by this specific transaction alone.","logs- Array: Array of log objects, which this transaction generated."]},{"i":"example-8","l":"Example"},{"l":"Getters"},{"l":"getListAccount","p":["Get list of account address in wallet"]},{"i":"parameters-9","l":"Parameters","p":[": The wallet object."]},{"i":"returns-9","l":"Returns","p":[": List of account address in wallet."]},{"i":"example-9","l":"Example"},{"l":"getMnemonic","p":["Get mnemonic of added wallet"]},{"i":"parameters-10","l":"Parameters","p":["none"]},{"i":"returns-10","l":"Returns","p":[": A string of 12 valid mnemonic word of wallet."]},{"i":"example-10","l":"Example"},{"l":"getWalletBase","p":["Get WalletBase of WalletBaseExtend"]},{"i":"parameters-11","l":"Parameters","p":["none"]},{"i":"returns-11","l":"Returns","p":[": A WalletBase object in web3-core"]},{"i":"example-11","l":"Example"},{"l":"getWalletImported","p":["Get list index of account imported by private key"]},{"i":"parameters-12","l":"Parameters","p":["none"]},{"i":"returns-12","l":"Returns","p":[": A list of index of account imported by private key"]},{"i":"example-12","l":"Example"},{"l":"getBalance","p":["Get balance (native token) of wallet"]},{"i":"parameters-13","l":"Parameters","p":["- : Address of account"]},{"i":"returns-13","l":"Returns","p":["(wei): Balance of account"]},{"i":"example-13","l":"Example"},{"l":"getAccount","p":["Get account from wallet by index"]},{"i":"parameters-14","l":"Parameters","p":["- : Index of account in wallet"]},{"i":"returns-14","l":"Returns","p":[": The account object base from web3-core"]},{"i":"example-14","l":"Example"},{"l":"getDefaultAccount","p":["Get default account of wallet"]},{"i":"parameters-15","l":"Parameters","p":["none"]},{"i":"returns-15","l":"Returns","p":[": The account object base from web3-core"]},{"i":"example-15","l":"Example"},{"l":"getNonce","p":["Get nonce of an address"]},{"i":"parameters-16","l":"Parameters","p":["- : Address of account"]},{"i":"returns-16","l":"Returns","p":[": The nonce of account"]},{"i":"example-16","l":"Example"},{"l":"Setters"},{"l":"setDefaultAccount","p":["Set default account of wallet to interact like Metamask"]},{"i":"parameters-17","l":"Parameters","p":["- : index of account need to set"]},{"i":"returns-17","l":"Returns","p":[": The wallet. See createWallet for more details."]},{"i":"example-17","l":"Example"},{"l":"Token management"},{"l":"getBalanceToken","p":["Get balance (PCO - ERC20 token) of wallet"]},{"i":"parameters-18","l":"Parameters","p":["- : Address of account"]},{"i":"returns-18","l":"Returns","p":[": Token balance of account"]},{"i":"example-18","l":"Example"},{"l":"getOwner","p":["Get owner (DDR - ERC721 token) of token id"]},{"i":"parameters-19","l":"Parameters","p":["- : Token id"]},{"i":"returns-19","l":"Returns","p":[": Address of owner"]},{"i":"example-19","l":"Example"},{"l":"getBalanceNFT","p":["Get balance (DDR - ERC721 token) of address"]},{"i":"parameters-20","l":"Parameters","p":["- : Address of account"]},{"i":"returns-20","l":"Returns","p":[": List token id of account"]},{"i":"example-20","l":"Example"}],[{"l":"Connection","p":["Connection function for web3 connection, almost class of this package use this connection to interact with Ethereum as a web3 head."]},{"l":"Import"},{"l":"getBlock","p":["Get all transactions of block"]},{"l":"Parameters","p":["- : The block hash or block number"]},{"l":"Returns","p":[": The block object:","baseFeePerGas- Number: Minimum to be charged to send a transaction on the network","difficulty- String: Integer of the difficulty for this block.","extraData- String: The “extra data” field of this block.","gasLimit- Number: The maximum gas allowed in this block.","gasUsed- Number: The total used gas by all transactions in this block.","hash 32 Bytes- String: Hash of the block. null if a pending block.","logsBloom 256 Bytes- String: The bloom filter for the logs of the block. null if a pending block.","miner- String: The address of the beneficiary to whom the mining rewards were given.","nonce 8 Bytes- String: Hash of the generated proof-of-work. null if a pending block.","number- Number: The block number. null if a pending block.","parentHash 32 Bytes- String: Hash of the parent block.","sha3Uncles 32 Bytes- String: SHA3 of the uncles data in the block.","size- Number: Integer the size of this block in bytes.","stateRoot 32 Bytes- String: The root of the final state trie of the block.","timestamp- Number: The unix timestamp for when the block was collated.","totalDifficulty- String: Integer of the total difficulty of the chain until this block.","transactions- Array: Array of transaction objects, or 32 Bytes transaction hashes depending on the returnTransactionObjects parameter.","transactionsRoot 32 Bytes- String: The root of the transaction trie of the block.","uncles- Array: Array of uncle hashes."]},{"l":"Example"},{"l":"getTransactionData","p":["Returns a transaction matching the given transaction hash."]},{"i":"parameters-1","l":"Parameters","p":["- : The transaction hash"]},{"i":"returns-1","l":"Returns","p":[": A transaction object its hash transactionHash:","hash 32 Bytes- String: Hash of the transaction.","nonce- Number: The number of transactions made by the sender prior to this one.","blockHash 32 Bytes- String: Hash of the block where this transaction was in. null if pending.","blockNumber- Number: Block number where this transaction was in. null if pending.","transactionIndex- Number: Integer of the transactions index position in the block. null if pending.","from- String: Address of the sender.","to- String: Address of the receiver. null if it’s a contract creation transaction.","value- String: Value transferred in wei.","gasPrice- String: Gas price provided by the sender in wei.","gas- Number: Gas provided by the sender.","input- String: The data sent along with the transaction."]},{"i":"example-1","l":"Example"},{"l":"getTransactionReceipt","p":["Returns a transaction matching the given transaction hash."]},{"i":"parameters-2","l":"Parameters","p":["- : The transaction hash"]},{"i":"returns-2","l":"Returns","p":[": A transaction object its hash transactionHash:","hash 32 Bytes- String: Hash of the transaction.","nonce- Number: The number of transactions made by the sender prior to this one.","blockHash 32 Bytes- String: Hash of the block where this transaction was in. null if pending.","blockNumber- Number: Block number where this transaction was in. null if pending.","transactionIndex- Number: Integer of the transactions index position in the block. null if pending.","from- String: Address of the sender.","to- String: Address of the receiver. null if it’s a contract creation transaction.","value- String: Value transferred in wei.","gasPrice- String: Gas price provided by the sender in wei.","gas- Number: Gas provided by the sender.","input- String: The data sent along with the transaction."]},{"i":"example-2","l":"Example"}],[{"l":"Helper function","p":["Helper function for Wallet"]},{"l":"signAndSendTransaction","p":["Sign and send transaction"]},{"l":"Parameters","p":["- : Connection to interact with blockchain","- : The data of transaction","- : The address of receiver, it can be empty to create contract","- : Private key of account to sign and send","- (optional): The nonce of account","- (optional): Estimate gas limit or not, default is false"]},{"l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found.","status- Boolean: TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.","blockHash 32 Bytes - String: Hash of the block where this transaction was in.","blockNumber- Number(or hex String): Block number where this transaction was in.","transactionHash 32 Bytes - String: Hash of the transaction.","transactionIndex- Number(or hex String): Integer of the transactions index position in the block.","from- String: Address of the sender.","to- String: Address of the receiver. null when it’s a contract creation transaction.","contractAddress- String: The contract address created, if the transaction was a contract creation, otherwise null.","cumulativeGasUsed- Number(or hex String): The total amount of gas used when this transaction was executed in the block.","gasUsed- Number(or hex String): The amount of gas used by this specific transaction alone.","logs- Array: Array of log objects, which this transaction generated."]},{"l":"Example"}],[{"l":"Getting started","p":["This SDK is wroted by typescript"]},{"l":"Adding DIDManager"}],[{"l":"Introduction","p":["Decentralized Identity (DID) smart contract base on Verifiable Credential."]},{"i":"what-is-a-verifiable-credential","l":"What is a Verifiable Credential?","p":["W3C define W3C Verifiable Credential.","In the physical world, a credential might consist of:","Information related to identifying the subject of the credential (for example, a photo, name, or identification number)","Information related to the issuing authority (for example, a city government, national agency, or certification body)","Information related to the type of credential this is (for example, a Dutch passport, an American driving license, or a health insurance card)","Information related to specific attributes or properties being asserted by the issuing authority about the subject (for example, nationality, the classes of - vehicle entitled to drive, or date of birth)","Evidence related to how the credential was derived","Information related to constraints on the credential (for example, expiration date, or terms of use).","A verifiable credential can represent all of the same information that a physical credential represents. The addition of technologies, such as digital signatures, makes verifiable credentials more tamper-evident and more trustworthy than their physical counterparts.","Holders of verifiable credentials can generate verifiable presentations and then share these verifiable presentations with verifiers to prove they possess verifiable credentials with certain characteristics.","Both verifiable credentials and verifiable presentations can be transmitted rapidly, making them more convenient than their physical counterparts when trying to establish trust at a distance.","While this specification attempts to improve the ease of expressing digital credentials, it also attempts to balance this goal with a number of privacy-preserving goals. The persistence of digital information, and the ease with which disparate sources of digital data can be collected and correlated, comprise a privacy concern that the use of verifiable and easily machine-readable credentials threatens to make worse. This document outlines and attempts to address a number of these issues in Section 7. Privacy Considerations. Examples of how to use this data model using privacy-enhancing technologies, such as zero-knowledge proofs, are also provided throughout this document.","The word \"verifiable\" in the terms verifiable credential and verifiable presentation refers to the characteristic of a credential or presentation as being able to be verified by a verifier, as defined in this document. Verifiability of a credential does not imply that the truth of claims encoded therein can be evaluated; however, the issuer can include values in the evidence property to help the verifier apply their business logic to determine whether the claims have sufficient veracity for their needs.","We define each object in our system is a Verifiable Credential or DID. Verifiable Credential"]},{"i":"what-is-erc-725","l":"What is ERC 725?","p":["ERC 725 is a proposed standard for blockchain-based identity authored by Fabian Vogelsteller, creator of ERC 20 and Web3.js. ERC 725 describes proxy smart contracts that can be controlled by multiple keys and other smart contracts. ERC 735 is an associated standard to add and remove claims to an ERC 725 identity smart contract. These identity smart contracts can describe humans, groups, objects, and machines. ERC 725 lives on the Ethereum blockchain. [ref]"]},{"l":"ERC 735 Motivation","p":["\"This standardised claim holder interface will allow Dapps and smart contracts to check the claims about a claim holder. Trust is here transfered to the issuers of claims.\"[ref]"]},{"l":"DID","p":["Base on W3C define and ERC725 standard","DID smart contract structure"]},{"l":"Workflow simulation","p":["DID basic workflow"]},{"l":"Pre-defined value"},{"i":"did-type---predefinedclaimkeys","l":"DID type - PreDefinedClaimKeys","p":["Base on project requirement, the claimKey is very dynamic, we defined here only 2 claimKeys for base authenticator in blockchain. We follow the idea that claimKey is a string, and key in claimKey mean key: value. If you want to use other claimKey, just use whatever string you want.","- : Patient DID","- : Provider (Clinic/Hospital) DID"]},{"l":"Key Purpose","p":["Base on ERC734 and ERC725, we defined 3 key purpose","- : Management key. Full permissions to all function of DID.","- : Delegate key. Use to call execute function of DID.","- : Claim signer key. Use to sign a signature for claim. We will use privateKey of this key to sign signature"]},{"l":"Schemes","p":["Base on ERC734 and ERC725, we define 4 schemes for sign data and contract call",": ECDSA scheme. We will use this scheme for signed signature, all needed function will use this scheme."]}],[{"l":"API Reference","p":["Here are the articles in this section","DIDManager"]}],[{"l":"DIDmanager","p":["DID manager SDK for manage DIDs"]},{"l":"Main function"},{"l":"createDID","p":["Create DID contract. In this version, this function only accept claimKey.PATIENT and claimKey.PROVIDER as claimKey, if you want to use new claimKey, please use addClaim function with a custom claimKey"]},{"l":"Parameters","p":["- : DID type, default is PreDefinedClaimKeys.PATIENT(check DID type - PreDefinedClaimKeys)","- : When create DID, we suggest using PharumoID as data for this field","- : Private key of CLAIM_SIGNER of claimHolder, this is fixed in backend server side","- : Private key of DID contract creator - owner of DID contract which will be created","- (optional): The nonce of account, use this if you want to use custom nonce"]},{"l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Decoded Event logs of transaction","- : Added claim of DID contract","- : ID of added claim","- : Key of added claim","- : Data (value) of added claim in hex string, convert it back to string for original data"]},{"l":"Example"},{"l":"addKey","p":["Add key to Claim holder (only access for Management side).","In the first time you add key to a DID, that DID has no key execpt MANAGEMENT, you must use that MANAGEMENT key to do this function. After that, you can use MANAGEMENT key or ACTION key to add more key to DID."]},{"i":"parameters-1","l":"Parameters","p":["- : The key purpose (check Key purpose)","- : The key type (check Schemes)","- : The private key of account to add as key","- : Private key of DELEGATE_KEY or MANAGEMENT key in first time","- : Target DID contract address","- (optional): The nonce of account, use this if you want to use custom nonce"]},{"i":"returns-1","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Event logs of transaction","- : Added key of DID contract"]},{"i":"example-1","l":"Example"},{"l":"removeKey","p":["Get owner of DID contract"]},{"i":"parameters-2","l":"Parameters","p":["- : The key to remove","- : Private key of DELEGATE_KEY or MANAGEMENT key","- : Target DID contract address","- (optional): The nonce of account, use this if you want to use custom nonce"]},{"i":"returns-2","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Event logs of transaction"]},{"i":"example-2","l":"Example"},{"l":"addClaim","p":["Add claim to DID contract"]},{"i":"parameters-3","l":"Parameters","p":["- : Private key of delegateKey","- : Private key of account that has permission to interact with DID","- : DID contract address","- : The key of claim, this can be any string","- : The scheme of claim (check Schemes)","- : The issuer address of claim","- : The raw data of claim","- (optional): The uri of claim","- (optional): The nonce of account"]},{"i":"returns-3","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Decoded Event logs of transaction","- : Added claim of DID contract","- : ID of added claim","- : Key of added claim","- : Data (value) of added claim in hex string, convert it back to string for original data"]},{"i":"example-3","l":"Example"},{"l":"removeClaim","p":["Remove claim from DID contract"]},{"i":"parameters-4","l":"Parameters","p":["- : Issuer (ClaimHolder) contract address, this is fixed in our system","- : The key of claim","- : Target DID contract address","- : Private key of DELEGATE_KEY","- (optional): The nonce of account"]},{"i":"returns-4","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt)","- : Event logs of transaction"]},{"i":"example-4","l":"Example"},{"l":"getClaimById","p":["Get claim detail of DID by claim id, this will be use to get specific claim if there are 2 claims with same key but from different issuer"]},{"i":"parameters-5","l":"Parameters","p":["- : DID contract address","- : The claim id"]},{"i":"returns-5","l":"Returns","p":["- : The claim key","- : The claim scheme, this return a string but it's actually number, please parse it to number","- : The claim issuer","- : A hex string of the signature","- : A hex string of the data","- : URI of the claim"]},{"i":"example-5","l":"Example"},{"l":"getClaimByKey","p":["Get claim detail of DID by claim id, this will be use to get specific claim, but the issuer is fixed in our system"]},{"i":"parameters-6","l":"Parameters","p":["- : DID contract address","- : The claim key"]},{"i":"returns-6","l":"Returns","p":["- : The claim key","- : The claim scheme, this return a string but it's actually number, please parse it to number","- : The claim issuer","- : A hex string of the signature","- : A hex string of the data","- : URI of the claim"]},{"i":"example-6","l":"Example"},{"l":"getClaimIdsByKey","p":["Get claim ids of DID by claim key"]},{"i":"parameters-7","l":"Parameters","p":["- : DID contract address","- : The key of claim"]},{"i":"returns-7","l":"Returns","p":[": Array of claim ids"]},{"i":"example-7","l":"Example"},{"l":"getClaimsKeyOwned","p":["Get list of claim keys owned by DID"]},{"i":"parameters-8","l":"Parameters","p":["- : DID contract address"]},{"i":"returns-8","l":"Returns","p":[": Array of claim keys"]},{"i":"example-8","l":"Example"},{"l":"getAllClaimsOwned","p":["Get list of all claims owned by DID"]},{"i":"parameters-9","l":"Parameters","p":["- : DID contract address"]},{"i":"returns-9","l":"Returns","p":[": Array of claim"]},{"i":"example-9","l":"Example"},{"l":"verifyClaim","p":["Check if DID has a valid claim key issued by our system"]},{"i":"parameters-10","l":"Parameters","p":["- : DID contract address","- : The claim key"]},{"i":"returns-10","l":"Returns","p":[": True if DID has a valid claim key, false otherwise"]},{"i":"example-10","l":"Example"},{"l":"Utils"},{"l":"addrToKey","p":["Hash address to key by keccak256"]},{"i":"parameters-11","l":"Parameters","p":["- : Address of account"]},{"i":"returns-11","l":"Returns","p":[": The hash keccak256 of address"]},{"i":"example-11","l":"Example"}],[{"l":"Getting started","p":["This SDK is wroted by typescript"]},{"l":"Adding DataIntegrity"}],[{"l":"API Reference","p":["Here are the articles in this section","DIDManager"]}],[{"l":"DataIntegrity","p":["This module use for check integrity of data"]},{"l":"Main function"},{"l":"checkIntegritySingleDDR","p":["Check the integrity of single ddr"]},{"l":"Parameters","p":["- : DID Address of Patient was created which has owner owns the DDR","- : DDR ID off-chain was sent from Pharumo","- : The data of DDR that was hashed by keccak256"]},{"l":"Returns","p":[": true if the data is valid, false if the data is invalid"]},{"l":"Example"},{"l":"checkIntegritySinglePatient","p":["Check the integrity of single patient"]},{"i":"parameters-1","l":"Parameters","p":["- : DID Address of Patient which owner owns all the DDRs","- : Array of raw DDR ID of DDRs belong to the patient","- : Array of hashed data of DDRs belong to the patient"]},{"i":"returns-1","l":"Returns","p":[": true if the data is valid, false if the data is invalid"]},{"i":"example-1","l":"Example"},{"l":"checkIntegrityStudy","p":["Check the integrity study"]},{"i":"parameters-2","l":"Parameters","p":["- : Array of root hash values of all patients"]},{"i":"returns-2","l":"Returns","p":[": true if the data is valid, false if the data is invalid"]},{"i":"example-2","l":"Example"}],[{"l":"DDR","p":["This module use to mint/share/consent/lock DDR"]},{"l":"Main function"},{"l":"mintDDR","p":["Create DDR for Patients"]},{"l":"Parameters","p":["- : Data was hashed by the keccak256","- : Id off-chain was sent from Pharumo","- (optional): The uri of DDR","- : Address of Patient was created from DID","- : Private key of delegateKey","- (optional): The nonce of account"]},{"l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- : An array of event logs of transactions.","- : List of DDRs was minted"]},{"l":"Example"},{"l":"mintBatchDDR","p":["Create many DDRs for Patients"]},{"i":"parameters-1","l":"Parameters","p":["- : List of datas were hashed by the keccak256","- : List of ids offline was sent from Pharumo","- : List of uris of DDR","- : Address of Patient was created from DID","- : Private key of delegateKey","- (optional): The nonce of account"]},{"i":"returns-1","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- : An array of event logs of transactions.","- : An array of object"]},{"i":"example-1","l":"Example"},{"l":"sharedDDR","p":["Allow address of patient to access id of ddr"]},{"i":"parameters-2","l":"Parameters","p":["- : Array of id token of ddr","- : Address of Patient was created from DID","- : Private key of delegateKey","- (optional): The nonce of account"]},{"i":"returns-2","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- : An array of event logs of transactions."]},{"i":"example-2","l":"Example"},{"l":"disclosureConsentDDR","p":["Allow list ids of ddr to provider"]},{"i":"parameters-3","l":"Parameters","p":["- : List ids token of ddr","- : Address of Patient was created from DID","- : The address of provider was created from DID","- : Private key of delegateKey belongs to Patient","- (optional): The nonce of account"]},{"i":"returns-3","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- : An array of event logs of transactions."]},{"i":"example-3","l":"Example"},{"l":"getShareDDR","p":["Check if this address of patient is allowed to contact DDR"]},{"i":"parameters-4","l":"Parameters","p":["- : Address of Patient was created from DID","- : Id token of DDR"]},{"i":"returns-4","l":"Returns","p":[": Check if address is allowed or not"]},{"i":"example-4","l":"Example"},{"l":"getConsentedDDR","p":["Check if this address of provideris allowed to watch ddr"]},{"i":"parameters-5","l":"Parameters","p":["- : The address of provider","- : Id token of ddr"]},{"i":"returns-5","l":"Returns","p":[": Check if address is allowed or not"]},{"i":"example-5","l":"Example"},{"l":"getLockedDDR","p":["Check if this DDR is locked or not"]},{"i":"parameters-6","l":"Parameters","p":["- : Id token of ddr"]},{"i":"returns-6","l":"Returns","p":[": True is locked and false is unlocked"]},{"i":"example-6","l":"Example"},{"l":"setERC20Proxy","p":["Call contract ERC20Proxy to DDR"]},{"i":"parameters-7","l":"Parameters","p":["- : Address of contract ERC20Proxy","- : Private key of contract creator(admin)","- (optional): The nonce of account"]},{"i":"returns-7","l":"Returns","p":["- : An array of event logs of transactions."]},{"i":"example-7","l":"Example"}],[{"l":"ERC20Proxy","p":["This is a proxy to main PCO contract, we cannot change original PCO, so we create a proxy to represent as awarder."]},{"l":"Main function"},{"l":"setAwardValue","p":["Set the value of award"]},{"l":"Parameters","p":["- : The value of award","- : Private key of contract creator(admin)","- (optional): The nonce of account"]},{"l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- :Event logs of transactions."]},{"l":"Example"},{"l":"setTokenOwner","p":["Set owner for token"]},{"i":"parameters-1","l":"Parameters","p":["- : Address of admin who keep money","- : Private key of contract creator(admin)","- (optional): The nonce of account"]},{"i":"returns-1","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- : Event logs of transactions."]},{"i":"example-1","l":"Example"},{"l":"setPCOToken","p":["Set owner for token"]},{"i":"parameters-2","l":"Parameters","p":["- : Address of PCO","- : Private key of contract creator(admin)","- (optional): The nonce of account"]},{"i":"returns-2","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- :Event logs of transactions."]},{"i":"example-2","l":"Example"},{"l":"awardToken","p":["Set the value of award"]},{"i":"parameters-3","l":"Parameters","p":["- : The address want to receive token","- : Private key of contract creator(admin)","- (optional): The nonce of account"]},{"i":"returns-3","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- :Event logs of transactions."]},{"i":"example-3","l":"Example"},{"l":"setDDRContract","p":["Set address for DDR"]},{"i":"parameters-4","l":"Parameters","p":["- : The address of DDR","- : Private key of contract creator(admin)","- (optional): The nonce of account"]},{"i":"returns-4","l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- : Event logs of transactions."]},{"i":"example-4","l":"Example"}],[{"l":"Patient","p":["This module for Patient lock level"]},{"l":"Main function"},{"l":"mintPatient","p":["Mint and lock Patient"]},{"l":"Parameters","p":["- : Address of Patient was created from DID","- : The uri of patient","- : Private key of contract creator(admin)","- (optional): The nonce of account"]},{"l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- : Event logs of transactions.","- : Id of Patient token."]},{"l":"Example"},{"l":"getPatientRootHashValue","p":["Get The Hash Value Of Patient"]},{"i":"parameters-1","l":"Parameters","p":["- : Address of Patient was created from DID"]},{"i":"returns-1","l":"Returns","p":[": Hash Value of Patient"]},{"i":"example-1","l":"Example"},{"l":"getListRootHashValue","p":["Get List Of Hash Value"]},{"i":"parameters-2","l":"Parameters","p":["None"]},{"i":"returns-2","l":"Returns","p":[": Array of Hash Value"]},{"i":"example-2","l":"Example"}],[{"l":"POCStudy","p":["This module for POCStudy lock level"]},{"l":"Main function"},{"l":"mintPOCStudy","p":["Create POC"]},{"l":"Parameters","p":["- : The uri of POCStudy.","- : The message was sent from Pharumo","- : Private key of contract creator(admin)","- (optional): The nonce of account"]},{"l":"Returns","p":["- : A transaction receipt object, or null if no receipt was found. (check receipt).","- : Event logs of transactions.","- : Id of POC token."]},{"l":"Example"},{"l":"getRootHashPOCPatient","p":["Get Root Hash Value"]},{"i":"parameters-1","l":"Parameters","p":["None"]},{"i":"returns-1","l":"Returns","p":[": Hash Value of Root Patient ."]},{"i":"example-1","l":"Example"},{"l":"getRootNodeIdPOCPatient","p":["Get Hash Value of Root Node Patient"]},{"i":"parameters-2","l":"Parameters","p":["None"]},{"i":"returns-2","l":"Returns","p":[": Hash Value of Root Node Patient"]},{"i":"example-2","l":"Example"}]]